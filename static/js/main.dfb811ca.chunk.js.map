{"version":3,"sources":["components/DisplayWeather.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["DisplayWeather","props","weather","temperature","description","location","region","country","wind_speed","pressure","precip","humidity","img","className","src","alt","Navbar","onSubmit","e","changeWeather","placeholder","onChange","changeRegion","target","value","App","change","setState","inputData","event","preventDefault","axios","get","state","then","response","weatherData","data","name","current","weather_descriptions","weather_icons","catch","error","console","log","message","city","status","regionName","coordinates","latitude","longitude","resp","loc","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAoEeA,MAlEf,SAAwBC,GAAO,MAazBA,EAAMC,QAVRC,EAH2B,EAG3BA,YACAC,EAJ2B,EAI3BA,YACAC,EAL2B,EAK3BA,SACAC,EAN2B,EAM3BA,OACAC,EAP2B,EAO3BA,QACAC,EAR2B,EAQ3BA,WACAC,EAT2B,EAS3BA,SACAC,EAV2B,EAU3BA,OACAC,EAX2B,EAW3BA,SACAC,EAZ2B,EAY3BA,IAEF,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,4BACGV,EACD,kCAFF,OAEmBC,GAEnB,4BAAKC,GACL,2BACGC,EADH,MACcC,IAIhB,yBAAKM,UAAU,YACb,yBAAKA,UAAU,UAAUC,IAAKF,EAAKG,IAAI,kBAI3C,yBAAKF,UAAU,OACb,yBAAKA,UAAU,yBACb,2BACE,yCADF,WAGA,4BAAKL,IAGP,yBAAKK,UAAU,yBACb,2BACE,uCADF,cAGA,4BAAKJ,IAGP,yBAAKI,UAAU,yBACb,2BACE,4CADF,QAGA,4BAAKH,IAGP,yBAAKG,UAAU,yBACb,2BACE,uCADF,OAGA,4BAAKF,OCvCAK,MApBf,SAAgBf,GACd,OACE,yBAAKY,UAAU,cACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SAAd,gBAGF,yBAAKA,UAAU,YACb,0BAAMA,UAAU,SAASI,SAAU,SAACC,GAAD,OAAOjB,EAAMkB,cAAcD,KAC5D,2BACEL,UAAU,cACVO,YAAY,iBACZC,SAAU,SAACH,GAAD,OAAOjB,EAAMqB,aAAaJ,EAAEK,OAAOC,cCoG1CC,E,kDA3Gb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IA8DRyB,OAAS,SAACF,GAER,EAAKG,SAAS,CAAEC,UAAWJ,KAjEV,EAoEnBL,cAAgB,SAACU,GACfA,EAAMC,iBAENC,IACGC,IADH,gGAE6F,EAAKC,MAAML,YAErGM,MAAK,SAACC,GAEL,IAAIC,EAAc,CAChB/B,SAAU8B,EAASE,KAAKhC,SAASiC,KACjCnC,YAAagC,EAASE,KAAKE,QAAQpC,YACnCC,YAAa+B,EAASE,KAAKE,QAAQC,qBAAqB,GACxDlC,OAAQ6B,EAASE,KAAKhC,SAASC,OAC/BC,QAAS4B,EAASE,KAAKhC,SAASE,QAChCC,WAAY2B,EAASE,KAAKE,QAAQ/B,WAClCC,SAAU0B,EAASE,KAAKE,QAAQ9B,SAChCC,OAAQyB,EAASE,KAAKE,QAAQ7B,OAC9BC,SAAUwB,EAASE,KAAKE,QAAQ5B,SAChCC,IAAKuB,EAASE,KAAKE,QAAQE,eAG7B,EAAKd,SAAS,CAAEU,KAAMD,OAEvBM,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,aAzFtC,EAAKb,MAAQ,CACXc,KAAM,CACJT,KAAM,GACNU,OAAQ,GACRC,WAAY,GACZ1C,QAAS,IAEX8B,KAAM,GACNT,UAAW,GACXsB,YAAa,CACXC,SAAU,EACVC,UAAW,IAdE,E,gEAkBE,IAAD,OAEhBrB,IACGC,IAAI,0BACJE,MAAK,SAACmB,GACL,IAAIC,EAAM,CACRhB,KAAMe,EAAKhB,KAAKU,KAChBC,OAAQK,EAAKhB,KAAKW,OAClBC,WAAYI,EAAKhB,KAAKY,WACtB1C,QAAS8C,EAAKhB,KAAK9B,SAErB,EAAKoB,SAAS,CAAEoB,KAAMO,IAES,YAA3B,EAAKrB,MAAMc,KAAKC,QAClBjB,IACGC,IADH,gGAE6F,EAAKC,MAAMc,KAAKT,OAE1GJ,MAAK,SAACC,GACLS,QAAQC,IAAIV,GACZ,IAAIC,EAAc,CAChB/B,SAAU,EAAK4B,MAAMc,KAAKT,KAC1BnC,YAAagC,EAASE,KAAKE,QAAQpC,YACnCC,YAAa+B,EAASE,KAAKE,QAAQC,qBAAqB,GACxDlC,OAAQ,EAAK2B,MAAMc,KAAKE,WACxB1C,QAAS,EAAK0B,MAAMc,KAAKxC,QACzBC,WAAY2B,EAASE,KAAKE,QAAQ/B,WAClCC,SAAU0B,EAASE,KAAKE,QAAQ9B,SAChCC,OAAQyB,EAASE,KAAKE,QAAQ7B,OAC9BC,SAAUwB,EAASE,KAAKE,QAAQ5B,SAChCC,IAAKuB,EAASE,KAAKE,QAAQE,eAG7B,EAAKd,SAAS,CAAEU,KAAMD,OAEvBM,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,eAGzCJ,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAMG,c,+BAuCxB,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,CAAQS,aAAciC,KAAK7B,OAAQP,cAAeoC,KAAKpC,gBACvD,yBAAKN,UAAU,aACb,kBAAC,EAAD,CAAgBX,QAASqD,KAAKtB,MAAMI,a,GArG5BmB,IAAMC,WCMJC,QACW,cAA7BC,OAAOtD,SAASuD,UAEe,UAA7BD,OAAOtD,SAASuD,UAEhBD,OAAOtD,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMG,c","file":"static/js/main.dfb811ca.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction DisplayWeather(props) {\r\n  //console.log(props.weather);\r\n  const {\r\n    temperature,\r\n    description,\r\n    location,\r\n    region,\r\n    country,\r\n    wind_speed,\r\n    pressure,\r\n    precip,\r\n    humidity,\r\n    img,\r\n  } = props.weather;\r\n  return (\r\n    <div className=\"user-weather\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3 weather-temp\">\r\n          <h1>\r\n            {temperature}\r\n            <sup>o</sup>C , {description}\r\n          </h1>\r\n          <h4>{location}</h4>\r\n          <p>\r\n            {region} , {country}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"col-md-9\">\r\n          <img className=\"mainImg\" src={img} alt=\"weather-img\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3 weather-info\">\r\n          <p>\r\n            <b>Wind Speed</b>(km/hr)\r\n          </p>\r\n          <h2>{wind_speed}</h2>\r\n        </div>\r\n\r\n        <div className=\"col-md-3 weather-info\">\r\n          <p>\r\n            <b>Pressure</b>(millibar)\r\n          </p>\r\n          <h2>{pressure}</h2>\r\n        </div>\r\n\r\n        <div className=\"col-md-3 weather-info\">\r\n          <p>\r\n            <b>Precipitation</b>(mm)\r\n          </p>\r\n          <h2>{precip}</h2>\r\n        </div>\r\n\r\n        <div className=\"col-md-3 weather-info\">\r\n          <p>\r\n            <b>Humidity</b>(%)\r\n          </p>\r\n          <h2>{humidity}</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayWeather;\r\n","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"row navbar\">\r\n      <div className=\"col-md-6\">\r\n        <h1 className=\"title\">Weather App</h1>\r\n      </div>\r\n\r\n      <div className=\"col-md-6\">\r\n        <form className=\"region\" onSubmit={(e) => props.changeWeather(e)}>\r\n          <input\r\n            className=\"regioninput\"\r\n            placeholder=\"Enter Location\"\r\n            onChange={(e) => props.changeRegion(e.target.value)}\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport DisplayWeather from \"./components/DisplayWeather\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: {\n        name: \"\",\n        status: \"\",\n        regionName: \"\",\n        country: \"\",\n      },\n      data: {},\n      inputData: \"\",\n      coordinates: {\n        latitude: 0,\n        longitude: 0,\n      },\n    };\n  }\n  componentDidMount() {\n    (() => {\n      axios\n        .get(\"http://ip-api.com/json\")\n        .then((resp) => {\n          let loc = {\n            name: resp.data.city,\n            status: resp.data.status,\n            regionName: resp.data.regionName,\n            country: resp.data.country,\n          };\n          this.setState({ city: loc });\n\n          if (this.state.city.status === \"success\") {\n            axios\n              .get(\n                `http://api.weatherstack.com/current?access_key=9b589bec07539a0a2aac5836fb5c6906&query=${this.state.city.name}`\n              )\n              .then((response) => {\n                console.log(response);\n                let weatherData = {\n                  location: this.state.city.name,\n                  temperature: response.data.current.temperature,\n                  description: response.data.current.weather_descriptions[0],\n                  region: this.state.city.regionName,\n                  country: this.state.city.country,\n                  wind_speed: response.data.current.wind_speed,\n                  pressure: response.data.current.pressure,\n                  precip: response.data.current.precip,\n                  humidity: response.data.current.humidity,\n                  img: response.data.current.weather_icons,\n                };\n\n                this.setState({ data: weatherData });\n              })\n              .catch((error) => console.log(error.message));\n          }\n        })\n        .catch((error) => {\n          console.log(error.message);\n        });\n    })();\n  }\n\n  //track input field\n  change = (value) => {\n    //console.log(\"Changing\")\n    this.setState({ inputData: value });\n  };\n\n  changeWeather = (event) => {\n    event.preventDefault();\n    //api call\n    axios\n      .get(\n        `http://api.weatherstack.com/current?access_key=9b589bec07539a0a2aac5836fb5c6906&query=${this.state.inputData}`\n      )\n      .then((response) => {\n        //console.log(response)\n        let weatherData = {\n          location: response.data.location.name,\n          temperature: response.data.current.temperature,\n          description: response.data.current.weather_descriptions[0],\n          region: response.data.location.region,\n          country: response.data.location.country,\n          wind_speed: response.data.current.wind_speed,\n          pressure: response.data.current.pressure,\n          precip: response.data.current.precip,\n          humidity: response.data.current.humidity,\n          img: response.data.current.weather_icons,\n        };\n\n        this.setState({ data: weatherData });\n      })\n      .catch((error) => console.log(error.message));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar changeRegion={this.change} changeWeather={this.changeWeather} />\n        <div className=\"container\">\n          <DisplayWeather weather={this.state.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}